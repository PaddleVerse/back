// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

enum Appearance {
  protected
  private
  public
}

enum Role{
  ADMIN
  MOD
  MEMBER
}

enum Status {
  ONLINE
  OFFLINE
  ON_GAME
}

enum Req {
  RECIVED
  SEND
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}


model user {
  id        Int      @id @default(autoincrement())
  googleId  String?  @unique
  fortytwoId  Int?  @unique
  username     String   @unique
  name      String?
  nickname  String? @default("zuse")
  password  String
  picture   String? @default("https://i.ibb.co/FsdsTYc/s-Instagram-photo-Soulless-Manga-Jujutsu-Kaisen-Artist-syrnrr-CLa5z-N2l-D1-L-JPG.jpg")
  banner_picture String? @default("http://localhost:8080/bg.jpg")
  status    Status  @default(OFFLINE)
  level     Int?     @default(600)
  createdAt DateTime @default(now())
  twoFa    Boolean? @default(false)
  twoFaSecret String?

  friends Friendship[]
  achievements achievement[]
  channel_participants channel_participant[]
  ban ban_list[]
}

model SearchHistory {
  id        Int      @id @default(autoincrement())
  userId     Int?
  createdAt DateTime @default(now())
}

model Friendship {
  id        Int      @id @default(autoincrement())
  user_id    Int?     @default(0)
  friendId  Int?     @default(0)
  status    FriendshipStatus
  request  Req? @default(SEND)
  user    user?     @relation(fields: [user_id], references: [id])
  createdAt DateTime @default(now())
}


model achievement {
  id        Int      @id @default(autoincrement())
  name      String?
  description String?
  picture   String?
  createdAt DateTime @default(now())
  user_id    Int?     @default(0)
  user    user?     @relation(fields: [user_id], references: [id])
}

model game_history {
  id        Int      @id @default(autoincrement())
  user_a_id    Int?     @default(0)
  user_b_id    Int?     @default(0)
  user_a_score    Int?     @default(0)
  user_b_score    Int?     @default(0)
  start_time    DateTime?
  end_time    DateTime?
}

model channel{
  id           Int      @id @default(autoincrement())
  picture String? @default("https://www.freepik.com/free-vector/flat-illustration-people-looking-up_14602291.htm#query=group%20cartoon&position=7&from_view=keyword&track=ais&uuid=5cdd0157-2810-4e64-b8ab-6d030cddd63e")
  topic       String? @default("here to have fun and make friends, no toxicity allowed")
  key          String?
  state        Appearance? @default(public)
  name         String? @unique
  createdAt    DateTime @default(now())
  messages     message[]
  participants channel_participant[]
  ban ban_list[]
}

model message{
  id        Int      @id @default(autoincrement())
  channel_id    Int?
  sender_id    Int? @default(0)
  sender_picture    String?
  conversation_id    Int?
  content    String?
  content_type    String?
  createdAt DateTime @default(now())
  conv   conversation?    @relation(fields: [conversation_id], references: [id])
  channel    channel?     @relation(fields: [channel_id], references: [id])
}

model ban_list{
  id        Int      @id @default(autoincrement())
  user_id    Int?     @default(0)
  channel_id    Int?     @default(0)
  joinedAt DateTime @default(now())
  user    user?     @relation(fields: [user_id], references: [id])
  channel    channel?     @relation(fields: [channel_id], references: [id])
}

model channel_participant{
  id        Int      @id @default(autoincrement())
  user_id    Int?     @default(0)
  channel_id    Int?     @default(0)
  role Role? @default(MEMBER)
  mute Boolean? @default(false)
  joinedAt DateTime @default(now())
  user    user?     @relation(fields: [user_id], references: [id])
  channel    channel?     @relation(fields: [channel_id], references: [id])
}

model conversation {
  id        Int      @id @default(autoincrement())
  user_a_id    Int?     @default(0)
  user_b_id    Int?     @default(0)
  createdAt DateTime @default(now())
  messages message[]
}